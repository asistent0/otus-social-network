services:
  # PHP-FPM
  php:
    build:
      context: .
      dockerfile: Dockerfile
      target: backend
    container_name: social_network_php
    ports:
      - "9000:9000"
    volumes:
      - .:/var/www
    depends_on:
      - citus-coordinator
      - redis
      - haproxy
      - tarantool

  # Nginx
  nginx:
    image: nginx:latest
    container_name: social_network_nginx
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - .:/var/www
    depends_on:
      - php

  # Redis
  redis:
    image: redis:latest
    container_name: social_network_redis
    volumes:
      - ./docker/redis/data:/data
    ports:
      - "6379:6379"

  supervisord:
    build:
      context: .
      dockerfile: Dockerfile
      target: supervisord
    container_name: social_network_supervisord
    user: www-data:www-data
    volumes:
      - .:/var/www
    depends_on:
      - citus-coordinator
      - redis
      - haproxy
      - tarantool

  cron:
    build:
      context: .
      dockerfile: Dockerfile
      target: backend
    container_name: social_network_cron
    volumes:
      - .:/var/www
    depends_on:
      - citus-coordinator
      - redis
      - haproxy
      - tarantool
    entrypoint: ["/var/www/bin/install.crontab.run.cron.sh", "/var/www/docker/cron/crontab"]

  rabbitmq1:
    image: rabbitmq:3.10.5-management
    container_name: social_network_rabbitmq1
    hostname: rabbitmq1
    environment:
      - RABBITMQ_ERLANG_COOKIE=${RABBITMQ_ERLANG_COOKIE}
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_DEFAULT_VHOST}
    volumes:
      - ./docker/rabbitmq/cluster-entrypoint.sh:/usr/local/bin/cluster-entrypoint.sh
      - ./docker/rabbitmq/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie
      - rabbitmq1-data:/var/lib/rabbitmq/
      - rabbitmq1-logs:/var/log/rabbitmq
    entrypoint: /usr/local/bin/cluster-entrypoint.sh
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "status" ]
      interval: 10s
      timeout: 5s
      retries: 3

  rabbitmq2:
    image: rabbitmq:3.10.5-management
    container_name: social_network_rabbitmq2
    hostname: rabbitmq2
    depends_on:
      - rabbitmq1
    environment:
      - RABBITMQ_ERLANG_COOKIE=${RABBITMQ_ERLANG_COOKIE}
      - JOIN_CLUSTER_HOST=rabbitmq1
    volumes:
      - ./docker/rabbitmq/cluster-entrypoint.sh:/usr/local/bin/cluster-entrypoint.sh
      - ./docker/rabbitmq/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie
      - rabbitmq2-data:/var/lib/rabbitmq/
      - rabbitmq2-logs:/var/log/rabbitmq
    entrypoint: /usr/local/bin/cluster-entrypoint.sh
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "status" ]
      interval: 10s
      timeout: 5s
      retries: 3

  rabbitmq3:
    image: rabbitmq:3.10.5-management
    container_name: social_network_rabbitmq3
    hostname: rabbitmq3
    depends_on:
      - rabbitmq1
    environment:
      - RABBITMQ_ERLANG_COOKIE=${RABBITMQ_ERLANG_COOKIE}
      - JOIN_CLUSTER_HOST=rabbitmq1
    volumes:
      - ./docker/rabbitmq/cluster-entrypoint.sh:/usr/local/bin/cluster-entrypoint.sh
      - ./docker/rabbitmq/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie
      - rabbitmq3-data:/var/lib/rabbitmq/
      - rabbitmq3-logs:/var/log/rabbitmq
    entrypoint: /usr/local/bin/cluster-entrypoint.sh
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "status" ]
      interval: 10s
      timeout: 5s
      retries: 3

  haproxy:
    image: haproxy:1.7
    container_name: social_network_haproxy
    volumes:
      - ./docker/rabbitmq/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    depends_on:
      - rabbitmq1
      - rabbitmq2
      - rabbitmq3
    ports:
      - "15672:15672"
      - "5672:5672"

  mercure:
    image: dunglas/mercure
    container_name: social_network_mercure
    restart: unless-stopped
    environment:
      SERVER_NAME: ':80'
      MERCURE_PUBLISHER_JWT_KEY: ${MERCURE_JWT_SECRET}
      MERCURE_SUBSCRIBER_JWT_KEY: ${MERCURE_JWT_SECRET}
      MERCURE_EXTRA_DIRECTIVES: |
        cors_origins *
        anonymous
    command: /usr/bin/caddy run --config /etc/caddy/Caddyfile --adapter caddyfile
    ports:
      - "3000:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/healthz"]
      timeout: 5s
      retries: 5
      start_period: 60s
    volumes:
      - ./docker/mercure/Caddyfile:/etc/caddy/Caddyfile
      - mercure_data:/data
      - mercure_config:/config

  # Citus Coordinator
  citus-coordinator:
    image: citusdata/citus:13-pg16
    container_name: social_network_citus_coordinator
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGPASSWORD: ${POSTGRES_PASSWORD}
      PG_PASSFILE: /var/lib/postgresql/.pgpass
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      citus.use_secondary_nodes: always
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - ./docker/citus/coordinator:/var/lib/postgresql/data
      - ./docker/citus/.pgpass:/var/lib/postgresql/.pgpass
    ports:
      - "5434:5432"

  # Citus Worker 1
  citus-worker1:
    image: citusdata/citus:13-pg16
    container_name: social_network_citus_worker1
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      PG_PASSFILE: /var/lib/postgresql/.pgpass
    volumes:
      - ./docker/citus/worker1:/var/lib/postgresql/data
      - ./docker/citus/.pgpass:/var/lib/postgresql/.pgpass
    ports:
      - "5435:5432"
    depends_on:
      - citus-coordinator

  # Citus Worker 2
  citus-worker2:
    image: citusdata/citus:13-pg16
    container_name: social_network_citus_worker2
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      PG_PASSFILE: /var/lib/postgresql/.pgpass
    volumes:
      - ./docker/citus/worker2:/var/lib/postgresql/data
      - ./docker/citus/.pgpass:/var/lib/postgresql/.pgpass
    ports:
      - "5436:5432"
    depends_on:
      - citus-coordinator

  tarantool:
    image: tarantool/tarantool:latest
    container_name: social_network_tarantool
    ports:
      - "3301:3301"
    volumes:
      - ./docker/tarantool:/opt/tarantool
    command: tarantool /opt/tarantool/init.lua

volumes:
  mercure_data:
  mercure_config:
  rabbitmq1-data:
  rabbitmq1-logs:
  rabbitmq2-data:
  rabbitmq2-logs:
  rabbitmq3-data:
  rabbitmq3-logs:
